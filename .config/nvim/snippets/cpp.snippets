snippet fenwick
  template <class T>
  struct Fenwick {
      int n;
      vector<T> fw;
      vector<T> arr;

      Fenwick(int n) : n(n), fw(n + 1), arr(n + 1) {}

      void set(int i, T x) {
          add(i, x - arr[i]);
      }

      void add(int i, T x) {
          arr[i] += x;
          for (; i <= n; i += i & -i) fw[i] += x;
      }

      T sum(int i) {
          T ret = 0;
          for (; i > 0; i -= i & -i) ret += fw[i];
          return ret;
      }

      T sum(int l, int r) { return sum(r) - sum(l - 1); }
  };

snippet segtree
  template <class T, auto op, auto e>
  struct SegmentTree {
      int n;
      vector<T> a, t;

      SegmentTree(int n) : n(n), a(n + 1, e()), t(4 * n) {};
      SegmentTree(vector<T> a) : n(sz(a) - 1), a(a), t(4 * n) {};

      void build(int x, int tl, int tr) {
          if (tl == tr) {
              t[x] = a[tl];
              return;
          }
          int m = (tl + tr) / 2;
          build(x * 2, tl, m);
          build(x * 2 + 1, m + 1, tr);
          t[x] = op(t[x * 2], t[x * 2 + 1]);
      }

      void upd(int idx, T val, int x, int tl, int tr) {
          if (tl == tr) {
              t[x] = a[tl] = val;
              return;
          }
          int m = (tl + tr) / 2;
          if (idx <= m) upd(idx, val, x * 2, tl, m);
          else upd(idx, val, x * 2 + 1, m + 1, tr);
          t[x] = op(t[x * 2], t[x * 2 + 1]);
      }

      T query(int l, int r, int x, int tl, int tr) {
          if (tr < l || r < tl) return e();
          else if (l <= tl && tr <= r) return t[x];
          int m = (tl + tr) / 2;
          return op(query(l, r, x * 2, tl, m), query(l, r, x * 2 + 1, m + 1, tr));
      }

      void build() { build(1, 1, n); }
      void upd(int idx, T val) { upd(idx, val, 1, 1, n); }
      T query(int l, int r) { return query(l, r, 1, 1, n); }
  };

snippet Mint
  template<int mod> struct mint {
      int v;
      explicit operator int() const { return v; } // explicit -> don't silently convert to int
      mint() : v(0) {}
      mint(ll _v) {
          v = _v % mod;
          if (v < 0) v += mod;
      }
      bool operator==(const mint &o) const { return v == o.v; }
      friend bool operator!=(const mint &a, const mint &b) { return !(a == b); }
      friend bool operator<(const mint &a, const mint &b) { return a.v < b.v; }
      friend istream &operator>>(istream &is, mint &a) {
          ll x;
          is >> x;
          a = mint(x);
          return is;
      }
      friend ostream &operator<<(ostream &os, mint a) {
          os << int(a);
          return os;
      }

      mint &operator+=(const mint &o) {
          if ((v += o.v) >= mod) v -= mod;
          return *this;
      }
      mint &operator-=(const mint &o) {
          if ((v -= o.v) < 0) v += mod;
          return *this;
      }
      mint &operator*=(const mint &o) {
          v = int((ll)v * o.v % mod);
          return *this;
      }
      mint &operator/=(const mint &o) { return (*this) *= inverse(o); }
      friend mint fpow(mint a, ll p) {
          mint ans = 1;
          assert(p >= 0);
          for (; p; p /= 2, a *= a)
              if (p & 1) ans *= a;
          return ans;
      }
      friend mint inverse(const mint &a) {
          assert(a.v != 0);
          return fpow(a, mod - 2);
      }

      mint operator-() const { return mint(-v); }
      mint &operator++() { return *this += 1; }
      mint &operator--() { return *this -= 1; }
      mint operator++(int) { mint ret = *this; ++*this; return ret; }
      mint operator--(int) { mint ret = *this; --*this; return ret; }
      friend mint operator+(mint a, const mint &b) { return a += b; }
      friend mint operator-(mint a, const mint &b) { return a -= b; }
      friend mint operator*(mint a, const mint &b) { return a *= b; }
      friend mint operator/(mint a, const mint &b) { return a /= b; }
  };
  using mi = mint<M>;
  using vmi = vector<mi>;


